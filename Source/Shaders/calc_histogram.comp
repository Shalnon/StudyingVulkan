/* Copyright 2023 Sean Halnon
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
**  You may obtain a copy of the License at
**
**  http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
**  distributed under the License is distributed on an "AS IS" BASIS,
**  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
**  See the License for the specific language governing permissionsand
**  limitations under the License.
*/

// Compile command: glslc -fshader-stage=comp --target-env=vulkan1.3 -o computeShader.spv  calc_histogram.comp
#version 450
#extension GL_EXT_scalar_block_layout : require

layout(std430, binding = 0 ) readonly uniform ubo_dataIn
{
    uint binSize;
    uint numPackedChars;
    uint dwordArray[32];
}ubo;

layout( binding = 1) buffer ssboDataOut
 {
    uint numsOut[128];
 }ssbo;
 
 layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

 void main() 
{
    if(gl_GlobalInvocationID.x < ubo.numPackedChars)
    {
        const uint numIdx   = gl_GlobalInvocationID.x;
        const uint dwordIdx = numIdx/4;
        const uint byteIdx  = numIdx % 4;

        uint dword     = ubo.dwordArray[dwordIdx];
        uint byteValue = (dword >> (byteIdx * 8)) & 0xff;
        uint binIdx    = (byteValue  >=  ubo.binSize) ?  (byteValue / ubo.binSize) : 0;

        atomicAdd(ssbo.numsOut[binIdx], 1);
    }
    else
    {
        ssbo.numsOut[gl_GlobalInvocationID.x] = 0xABABABAB;
    }
}